/* @flow */

import * as assert from "assert";
import Prando from "prando";
import { describe, it } from "mocha";

import computeTag from "../../src/encode/computeTag";

describe("computeTag", function () {
  it("generates correct tags", function () {
    let word;

    word = [0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00];
    assert.equal(computeTag(word), 0x51);

    word = [0x19, 0x00, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00];
    assert.equal(computeTag(word), 0x31);

    word = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    assert.equal(computeTag(word), 0x00);

    word = [0x09, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00];
    assert.equal(computeTag(word), 0x31);

    word = [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    assert.equal(computeTag(word), 0x01);

    word = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    assert.equal(computeTag(word), 0xff);

    word = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff]
    assert.equal(computeTag(word), 0x80);

    word = [0x0a, 0x15, 0x01, 0xac, 0x6d, 0x9f, 0x03, 0xf2];
    assert.equal(computeTag(word), 0xff);

    word = [0x41, 0x53, 0x53, 0x48, 0x41, 0x54, 0x00, 0x00];
    assert.equal(computeTag(word), 0x3f);
  });
});
